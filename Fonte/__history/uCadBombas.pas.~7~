unit uCadBombas;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uCadastros, Data.DB, Vcl.StdCtrls, Vcl.Grids, Vcl.DBGrids, Vcl.ComCtrls, Vcl.Buttons,
  Vcl.ExtCtrls, StrUtils;

type
  TFormCadBomba = class(TFormPadrao)
    cbTanque: TComboBox;
    edtCodigo: TEdit;
    edtDescBomba: TEdit;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    procedure GridRegistrosDblClick(Sender: TObject);
    procedure edtFiltroExit(Sender: TObject);
    procedure btnFiltroClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure btnGravarClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
  private
    { Private declarations }
    procedure InicializarTela;
    procedure NovoRegistro;

  public
    { Public declarations }
  end;

var
  FormCadBomba: TFormCadBomba;

const

  SqlBomba = 'SELECT B.ID, B.ID_TANQUE, T.desctanque AS TANQUE, B.descbomba FROM BOMBAS B JOIN TANQUES T ON T.id = B.id_tanque';

implementation

{$R *.dfm}

{ TFormCadBomba }

procedure TFormCadBomba.AlterarRegistro;
begin

end;

procedure TFormCadBomba.btnAlterarClick(Sender: TObject);
begin
  inherited;
  if not QGrid.IsEmpty then
    VisualizarRegistro(QGrid.FieldByName('ID').AsInteger);
end;

procedure TFormCadBomba.btnExcluirClick(Sender: TObject);
begin
  inherited;
  if not QGrid.IsEmpty then
    ExcluirRegistro(QGrid.FieldByName('ID').AsInteger);
end;

procedure TFormCadBomba.btnFiltroClick(Sender: TObject);
begin
  inherited;
    if not (SameText(Trim(edtFiltro.Text),'')) then
  begin
    QGrid.Filtered := false;
    QGrid.Filter := 'DescBomba Like '+QuotedStr('%'+edtFiltro.Text+'%');
    QGrid.Filtered := true;
  end
  else
    QGrid.Filtered := false;
end;

procedure TFormCadBomba.btnGravarClick(Sender: TObject);
begin
  inherited;
  AlterarRegistro;
end;

procedure TFormCadBomba.btnNovoClick(Sender: TObject);
begin
  inherited;
  NovoRegistro;
end;

procedure TFormCadBomba.edtFiltroExit(Sender: TObject);
begin
  inherited;
  btnFiltro.Click;
end;

procedure TFormCadBomba.ExcluirRegistro(pCodigo: integer);
begin

end;

procedure TFormCadBomba.FormCreate(Sender: TObject);
begin
  inherited;
  InicializarTela;
end;

procedure TFormCadBomba.GridRegistrosDblClick(Sender: TObject);
begin
  inherited;
  if not QGrid.IsEmpty then
    VisualizarRegistro(QGrid.FieldByName('ID').AsInteger);
end;

procedure TFormCadBomba.InicializarTela;
var
i:integer;
Coluna:TColumn;
begin
  QGrid.SQL.Clear;
  QGrid.SQL.Add(SqlBomba);
  QGrid.Open;

  DtsGrid.DataSet := QGrid;
  GridRegistros.DataSource := DtsGrid;

  for i := 0 to QGrid.FieldCount-1 do
  begin
    Coluna           := GridRegistros.Columns.Add();
    Coluna.FieldName := QGrid.Fields[i].FieldName;

    case IndexStr(UpperCase(QGrid.Fields[i].FieldName),['ID','TANQUE','DESCBOMBA']) of
      0:Coluna.Title.Caption := 'Código';
      1:Coluna.Title.Caption := 'Tanque';
      2:Coluna.Title.Caption := 'Descrição da Bomba';
    end;

  end;



end;

procedure TFormCadBomba.NovoRegistro;
begin
  NovoRegistro;
end;



end.
